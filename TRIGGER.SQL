/*  
    1- L'UTENTE DEVE ESSERE MAGGIORENNE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER VERIFICA_ETA_UTENTE
BEFORE INSERT ON UTENTE
FOR EACH ROW
DECLARE
    MINORENNE EXCEPTION;
BEGIN

    IF (SYSDATE - :NEW.DATA_DI_NASCITA) / 365.25 < 18 THEN
        RAISE MINORENNE;
    END IF;

EXCEPTION WHEN MINORENNE THEN
    RAISE_APPLICATION_ERROR(-18,'ERRORE, DEVI AVERE ALMENO 18 ANNI!');

END VERIFICA_ETA_UTENTE;

/*
    2- ALL'INSERIMENTO DELLA CARTA, ESSA NON DEVE ESSERE SCADUTA
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER VERIFICA_CARTA_SCADUTA
BEFORE INSERT ON CONTO_CORRENTE
FOR EACH ROW
DECLARE
    CARTASCADUTA EXCEPTION;
BEGIN

    IF :NEW.DATA_DI_SCADENZA < SYSDATE THEN
        RAISE CARTASCADUTA;
    END IF;

EXCEPTION WHEN CARTASCADUTA THEN 
    RAISE_APPLICATION_ERROR(-1000,'ERRORE, CARTA SCADUTA!');

END VERIFICA_CARTA_SCADUTA;

/*  
    3- CONTROLLO SALDO MOVIMENTO PRELIEVO
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_PRELIEVO
BEFORE INSERT ON MOVIMENTO
FOR EACH ROW
DECLARE
    SALDO_NON_SUFFICIENTE   EXCEPTION;
    SALDO   NUMBER := 0;
    CONTATORE NUMBER := 0;
BEGIN

    SELECT COUNT(*)
    INTO CONTATORE
    FROM MOVIMENTO;

    IF CONTATORE > 0 AND :NEW.TIPO_MOVIMENTO = 2 THEN

        FOR i IN (
            SELECT QUANTITA,FEE,TIPO_MOVIMENTO
            FROM MOVIMENTO
            WHERE ID_CONTO_VIRTUALE_M = :NEW.ID_CONTO_VIRTUALE_M
        )
        LOOP
            IF i.TIPO_MOVIMENTO = 1 THEN
                SALDO := SALDO + (i.QUANTITA - i.FEE);
            ELSE 
                SALDO := SALDO - (i.QUANTITA - i.FEE);
            END IF;
        END LOOP;

        IF :NEW.QUANTITA > SALDO THEN
            RAISE SALDO_NON_SUFFICIENTE;
        END IF;
    -- NEL CASO IN CUI NON CI SIA NESSUNA TUPLA IN MOVIMENTO E SI VUOLE PRELEVARE    
    ELSE IF :NEW.TIPO_MOVIMENTO = 2 THEN
        RAISE SALDO_NON_SUFFICIENTE;

    END IF;

    EXCEPTION WHEN SALDO_NON_SUFFICIENTE THEN
        RAISE_APPLICATION_ERROR(-2000,'ERRORE, SALDO INSUFFICIENTE!');

END CONTROLLO_PRELIEVO;

/*  
    4- LA DATA DELLA REWARDS DEVE ESSERE SUCCESSIVA ALLA DATA DI CREAZIONE DEL CONTO VIRTUALE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_DATA_REWARDS
BEFORE INSERT ON REWARDS
FOR EACH ROW
DECLARE
    DATA_NON_ACCETTATA EXCEPTION;
    DATACREAZIONE      DATE;
BEGIN

    SELECT DATA_CREAZIONE
    INTO DATACREAZIONE
    FROM CONTO_VIRTUALE
    WHERE ID = :NEW.ID_CONTO_VIRTUALE_R;

    IF DATACREAZIONE != NULL THEN
        IF :NEW.DATA_RILASCIO < DATACREAZIONE THEN
            RAISE   DATA_NON_ACCETTATA;
        END IF;
    END IF;

    EXCEPTION WHEN DATA_NON_ACCETTATA THEN
        RAISE_APPLICATION_ERROR(-3000,'ERRORE, IL CONTO NON ESISTE!');
END CONTROLLO_DATA_REWARDS;

/*
    5- ALL'INSERIMENTO DELLA CARTA NEL CONTO VIRTUALE ESSA DEVE ESISTERE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_ESISTENZA_CARTA
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    NON_ESISTE  EXCEPTION;
    NCARTA      CHAR(16);
BEGIN

    SELECT NUMERO_CONTO
    INTO NCARTA
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :NEW.NUMERO_CONTO_C;

    IF NCARTA IS NULL THEN
        RAISE NON_ESISTE;
    END IF;

    EXCEPTION WHEN NON_ESISTE THEN
        RAISE_APPLICATION_ERROR(-4000,'ERRORE, CARTA INESISTENTE!');

END CONTROLLO_ESISTENZA_CARTA;

/*  
    6- TRIGGER CHE CONTROLLA SE, ALL'INSERIMENTO DI UN CONTO COLLEGTO AL CONTO VIRTUALE, TUTTE LE CARTE COLLEGATE AD ESSO SIANO DELLO STESSO UTENTE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
BEGIN

    SELECT CF_UTENTE
    INTO CFUTENTE
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :NEW.NUMERO_CONTO_C;

    FOR i IN (
        SELECT CF_UTENTE
        FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO IN (
            SELECT NUMERO_CONTO_C
            FROM COLLEGATO
            WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C
        )
    )
    LOOP
        IF CFUTENTE != i.CF_UTENTE THEN
            RAISE PIU_UTENTI;
        END IF;
    END LOOP;

    EXCEPTION WHEN PIU_UTENTI THEN
        RAISE_APPLICATION_ERROR(-6000,'ERRORE, CARTE COLLEGATE A PIU DI UNA PERSONA!');

END VERIFA_CARTE_SU_CONTO_VIRTUALE; 

/*  
    7- AL COMPIERE DI UN MOVIMENTO IL NUMERO DELLA CARTA DEVE ESSERE COLLEGATO AL CONTO VIRTUALE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_METODO_DI_PAGAMENTO
BEFORE INSERT ON MOVIMENTO
FOR EACH ROW
DECLARE
    NON_PRESENTE EXCEPTION;
BEGIN

    FOR i IN (
        SELECT NUMERO_CONTO_C
        FROM COLLEGATO
        WHERE :NEW.ID_CONTO_VIRTUALE_M = ID_CONTO_VIRTUALE_C
    )
    
    LOOP

        IF :NEW.NUMERO_CONTO_M <> i.NUMERO_CONTO_C THEN 
            RAISE NON_PRESENTE;
        END IF;

    END LOOP;

    EXCEPTION WHEN NON_PRESENTE THEN
        RAISE_APPLICATION_ERROR(-7000,'IL METODO DI PAGAMENTO NON RISULTA COLLEGATO AL CONTO VIRTUALE');

END CONTROLLO_METODO_DI_PAGAMENTO;

/*
    EVENTUALI TRIGGER SU OPERAZIONE CHE ANCORA DOBBIAMO FARE EER
*/