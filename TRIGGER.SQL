/*  
    1- L'UTENTE DEVE ESSERE MAGGIORENNE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER VERIFICA_ETA_UTENTE
BEFORE INSERT ON UTENTE
FOR EACH ROW
DECLARE
    MINORENNE EXCEPTION;
BEGIN

    IF (SYSDATE - :NEW.DATA_DI_NASCITA) / 365.25 < 18 THEN
        RAISE MINORENNE;
    END IF;

EXCEPTION WHEN MINORENNE THEN
    RAISE_APPLICATION_ERROR(-18,'ERRORE, DEVI AVERE ALMENO 18 ANNI!');

END VERIFICA_ETA_UTENTE;

/*
    2- ALL'INSERIMENTO DELLA CARTA, ESSA NON DEVE ESSERE SCADUTA
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER VERIFICA_CARTA_SCADUTA
BEFORE INSERT ON CONTO_CORRENTE
FOR EACH ROW
DECLARE
    CARTASCADUTA EXCEPTION;
BEGIN

    IF :NEW.DATA_DI_SCADENZA < SYSDATE THEN
        RAISE CARTASCADUTA;
    END IF;

EXCEPTION WHEN CARTASCADUTA THEN 
    RAISE_APPLICATION_ERROR(-1000,'ERRORE, CARTA SCADUTA!');

END VERIFICA_CARTA_SCADUTA;

/*  
    3- CONTROLLO SALDO MOVIMENTO PRELIEVO
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_PRELIEVO
BEFORE INSERT ON MOVIMENTO
FOR EACH ROW
DECLARE
    SALDO_NON_SUFFICIENTE   EXCEPTION;
    SALDO   NUMBER := 0;
    CONTATORE NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO CONTATORE
    FROM MOVIMENTO;

    IF CONTATORE > 0 AND :NEW.TIPO_MOVIMENTO = 2 THEN

        FOR i IN (
            SELECT QUANTITA,FEE,TIPO_MOVIMENTO
            FROM MOVIMENTO
            WHERE ID_CONTO_VIRTUALE_M = :NEW.ID_CONTO_VIRTUALE_M
        )
        LOOP
            IF i.TIPO_MOVIMENTO = 1 THEN
                SALDO := SALDO + (i.QUANTITA - i.FEE);
            ELSE 
                SALDO := SALDO - i.QUANTITA;
            END IF;
        END LOOP;

        IF :NEW.QUANTITA > SALDO THEN
            RAISE SALDO_NON_SUFFICIENTE;
        END IF;

    END IF;

    EXCEPTION WHEN SALDO_NON_SUFFICIENTE THEN
        RAISE_APPLICATION_ERROR(-2000,'ERRORE, SALDO INSUFFICIENTE!');

END CONTROLLO_PRELIEVO;

/*  
    4- LA DATA DELLA REWARDS DEVE ESSERE SUCCESSIVA ALLA DATA DI CREAZIONE DEL CONTO VIRTUALE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_DATA_REWARDS
BEFORE INSERT ON REWARDS
FOR EACH ROW
DECLARE
    DATA_NON_ACCETTATA EXCEPTION;
    DATACREAZIONE      DATE;
BEGIN

    SELECT DATA_CREAZIONE
    INTO DATACREAZIONE
    FROM CONTO_VIRTUALE
    WHERE ID = :NEW.ID_CONTO_VIRTUALE_R;

    IF DATACREAZIONE != NULL THEN
        IF :NEW.DATA_RILASCIO < DATACREAZIONE THEN
            RAISE   DATA_NON_ACCETTATA;
        END IF;
    END IF;

    EXCEPTION WHEN DATA_NON_ACCETTATA THEN
        RAISE_APPLICATION_ERROR(-3000,'ERRORE, IL CONTO NON ESISTE!');;
END CONTROLLO_DATA_REWARDS;

/*
    5- ALL'INSERIMENTO DELLA CARTA NEL CONTO VIRTUALE ESSA DEVE ESISTERE
    TESTATO E FUNZIONANTE
*/
CREATE OR REPLACE TRIGGER CONTROLLO_ESISTENZA_CARTA
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    NON_ESISTE  EXCEPTION;
    NCARTA      CHAR(16);
BEGIN

    SELECT NUMERO_CONTO
    INTO NCARTA
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :NEW.NUMERO_CONTO_C;

    IF NCARTA = NULL THEN -- IS NULL
        RAISE NON_ESISTE;
    END IF;

    EXCEPTION WHEN NON_ESISTE THEN
        RAISE_APPLICATION_ERROR(-4000,'ERRORE, CARTA INESISTENTE!');

END CONTROLLO_ESISTENZA_CARTA;

/*  
    6- DEVE CONTROLLARE PER UN CONTO VIRTUALE TUTTE LE CARTE COLLEGATE DEVONO ESSERE DI UN UTENTE
    TRIGGER CHE CONTROLLA SE, ALL'INSERIMENTO DI UN CONTO COLLEGTO AL CONTO VIRTUALE,
    TUTTE LE CARTE COLLEGATE AD ESSO SIANO DELLO STESSO UTENTE
*/
-- DA CORREGGERE LA SUBQUERY
CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
    CONTATORE   NUMBER := 0;
BEGIN

    SELECT CF_UTENTE
    INTO CFUTENTE
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :NEW.NUMERO_CONTO_C;

    FOR i IN (
        SELECT CF_UTENTE
        FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO = (
            SELECT NUMERO_CONTO_C
            FROM COLLEGATO
            WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C
        )
    )
    LOOP
        IF CFUTENTE != i.CF_UTENTE THEN
            RAISE PIU_UTENTI;
        END IF;
    END LOOP;

    EXCEPTION WHEN PIU_UTENTI THEN
        RAISE_APPLICATION_ERROR(-6000,'ERRORE, CARTE COLLEGATE A PIU DI UNA PERSONA!');

END VERIFA_CARTE_SU_CONTO_VIRTUALE; 



CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
 --   IDCONTO     VARCHAR(30);
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
    CFUTENTE2   CHAR(16);
BEGIN

    SELECT NUMERO_CONTO_C
    INTO NCARTA
    FROM COLLEGATO
    WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

    IF NCARTA != NULL THEN 
        SELECT CF_UTENTE
        INTO CFUTENTE
        FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO = NCARTA;
    END IF;

    IF CFUTENTE2 = NULL AND CFUTENTE != NULL THEN
        CFUTENTE2 := CFUTENTE;
    END IF;

    IF CFUTENTE != CFUTENTE2 THEN
        RAISE PIU_UTENTI;
    END IF;

    EXCEPTION WHEN PIU_UTENTI THEN
        RAISE_APPLICATION_ERROR(-1000,'ERRORE, CARTE COLLEGATE A PIU DI UNA PERSONA!');

END VERIFA_CARTE_SU_CONTO_VIRTUALE;

---------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
AFTER INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
--    IDCONTO     VARCHAR(30);
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
    CFUTENTE2   CHAR(16);
    CONTATORE   NUMBER;
BEGIN

    --IF (SELECT NUMERO_CONTO_C FROM COLLEGATO IS NOT NULL) THEN
    SELECT COUNT(NUMERO_CONTO_C)
    INTO CONTATORE
    FROM COLLEGATO;

    IF CONTATORE > 0 THEN
        SELECT NUMERO_CONTO_C
        INTO NCARTA
        FROM COLLEGATO
        WHERE ID_CONTO_VIRTUALE_C = :OLD.ID_CONTO_VIRTUALE_C;

        IF NCARTA IS NOT NULL THEN 
            SELECT CF_UTENTE
            INTO CFUTENTE
            FROM CONTO_CORRENTE
            WHERE NUMERO_CONTO = NCARTA;
        END IF;

    END IF;
    

    SELECT CF_UTENTE
    INTO CFUTENTE2
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :OLD.NUMERO_CONTO_C;

    --IF CFUTENTE2 IS NULL AND CFUTENTE IS NOT NULL THEN
        --CFUTENTE2 := CFUTENTE;
    --END IF;
    --IF CFUTENTE IS NOT NULL THEN
        IF CFUTENTE != CFUTENTE2 THEN
            RAISE PIU_UTENTI;
        END IF;
    -- IF;

    EXCEPTION WHEN PIU_UTENTI THEN
        DBMS_OUTPUT.PUT_LINE('ERRORE');
        DELETE FROM COLLEGATO WHERE ID_CONTO_VIRTUALE_C = :OLD.ID_CONTO_VIRTUALE_C;

END VERIFA_CARTE_SU_CONTO_VIRTUALE;

--------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
    CFUTENTE2   CHAR(16);
    CONTATORE   NUMBER;
BEGIN

    SELECT CF_UTENTE
    INTO CFUTENTE2
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = :NEW.NUMERO_CONTO_C; -- CF DELL'UTENTE DA INSERIRE

    INSERT INTO COLLEGATO(ID_CONTO_VIRTUALE_C,NUMERO_CONTO_C) VALUES
    (:NEW.ID_CONTO_VIRTUALE_C,:NEW.NUMERO_CONTO_C);

    SELECT NUMERO_CONTO_C
    INTO NCARTA
    FROM COLLEGATO
    WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

    IF NCARTA IS NOT NULL THEN 
        SELECT CF_UTENTE
        INTO CFUTENTE
        FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO = NCARTA;
    END IF;

    IF CFUTENTE != CFUTENTE2 THEN
        RAISE PIU_UTENTI;
    END IF;

    EXCEPTION WHEN PIU_UTENTI THEN
        DBMS_OUTPUT.PUT_LINE('ERRORE');
        DELETE FROM COLLEGATO WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

END VERIFA_CARTE_SU_CONTO_VIRTUALE;

--------------------------------------------------------------------------------------------------


CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
    NCARTA      CHAR(16);
    CFUTENTE    CHAR(16);
    ARR as VARCHAR(16);
BEGIN

    SELECT NUMERO_CONTO_C
    INTO NCARTA
    FROM COLLEGATO
    WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

    FOR r IN (
        SELECT COUNT(*)CF_UTENTE
        INTO CFUTENTE
        FROM CONTO_CORRENTE
        WHERE NCARTA = NUMERO_CONTO
    )
    LOOP
        SET ARR(r) = CFUTENTE;
    END LOOP;

    FOR r2 IN (
        COUNT(*)
    )
    LOOP
        IF ARR(r2) <> ARR(r2+1) THEN
            RAISE   PIU_UTENTI;
        END IF;
    END LOOP;

    EXCEPTION
        WHEN PIU_UTENTI THEN
            :NEW.ID_CONTO_VIRTUALE_C := NULL;

END VERIFA_CARTE_SU_CONTO_VIRTUALE;

-- RIPROVA
CREATE OR REPLACE TRIGGER VERIFA_CARTE_SU_CONTO_VIRTUALE
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE PIU_UTENTI  EXCEPTION;
DECLARE NCARTA      CHAR(16);
DECLARE CFUTENTE    CHAR(16);
DECLARE ARR as VARCHAR(16);
BEGIN

    SELECT NUMERO_CONTO_C
    INTO NCARTA
    FROM COLLEGATO
    WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

    SELECT COUNT(*)CF_UTENTE
    INTO CFUTENTE
    FROM CONTO_CORRENTE
    WHERE NCARTA = NUMERO_CONTO

    FOR r2 IN (
        COUNT(*)
    );
    LOOP
        IF ARR(r2) <> ARR(r2+1) THEN
            RAISE   PIU_UTENTI;
        END IF;
    END LOOP;

    EXCEPTION
        WHEN PIU_UTENTI THEN
            :NEW.ID_CONTO_VIRTUALE_C := NULL;

END VERIFA_CARTE_SU_CONTO_VIRTUALE;

--riprova
CREATE OR REPLACE TRIGGER NNN
BEFORE INSERT ON COLLEGATO
FOR EACH ROW
DECLARE
    PIU_UTENTI  EXCEPTION;
    NCARTA      CHAR(16);
    NCFUTENTE    NUMBER;
BEGIN

    SELECT NUMERO_CONTO_C
    INTO NCARTA
    FROM COLLEGATO
    WHERE ID_CONTO_VIRTUALE_C = :NEW.ID_CONTO_VIRTUALE_C;

    SELECT COUNT(CF_UTENTE)
    INTO NCFUTENTE
    FROM CONTO_CORRENTE
    WHERE NUMERO_CONTO = NCARTA;

    IF NCFUTENTE >= 2 THEN
        RAISE PIU_UTENTI;
    END IF;

EXCEPTION WHEN PIU_UTENTI THEN
    :NEW.ID_CONTO_VIRTUALE_C := NULL;

END NNN;


-- DELL' ID MI INTERESSA TUTTI I CF E NUMERI CONTI COLLEGATI AD ESSI
SELECT CF_UTENTE,NUMERO_CONTO
    FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO = (SELECT NUMERO_CONTO_C 
                                FROM COLLEGATO 
                                    WHERE ID_CONTO_VIRTUALE_C = (SELECT CV.ID 
                                                                    FROM CONTO_VIRTUALE CV
                                                                        WHERE CV.ID = '49273856346937903118'));

SELECT COUNT(CF_UTENTE)
    FROM CONTO_CORRENTE
        WHERE NUMERO_CONTO IN (SELECT NUMERO_CONTO_C 
                                FROM COLLEGATO 
                                    WHERE ID_CONTO_VIRTUALE_C IN (SELECT CV.ID 
                                                                    FROM CONTO_VIRTUALE CV
                                                                        WHERE CV.ID = '49273856346937903118'));

/*  7
    I CONTI CORRENTI DA CUI PRELEVIAMO I SOLDI SONO TRA UNA DELLE MODALITA' DI PAGAMENTO COLLEGATE A QUEL CONTO VIRTUALE DA CUI STIAMO FACENDO IL MOVIMENTO
*/
CREATE OR REPLACE TRIGGER CONTROLLO_METODO_DI_PAGAMENTO
BEFORE INSERT ON MOVIMENTO
FOR EACH ROW
DECLARE
    NON_PRESENTE    EXCEPTION;
BEGIN

/*
    EVENTUALI TRIGGER SU OPERAZIONE CHE ANCORA DOBBIAMO FARE EER
*/